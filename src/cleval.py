import sys
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix, classification_report
import argparse
from io import BytesIO

from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from reportlab.lib.utils import ImageReader

import logging
import json

logger = logging.getLogger('cleval')
handler = logging.StreamHandler(sys.stderr)
handler.setFormatter(logging.Formatter(''))
handler.setLevel(logging.INFO)

logger.addHandler(handler)
logger.setLevel(logging.INFO)


"""
Author: Matthijs Westera

Simple CLI to compare precomputed lists of predictions vs targets, logging a simple classification report, optionally a 
PDF with plots, and outputting a classification report as json dict.

Examples:

$ cleval preds.txt targs.txt --pdf report.pdf

Or with piping:

$ cat preds.txt | cleval - targs.txt --pdf report.pdf > metrics.json

"""



def main():
    parser = argparse.ArgumentParser(description='Compare precomputed lists of predictions vs targets, logging a simple classification report, optionally PDF, and outputting json.')
    parser.add_argument('true', type=argparse.FileType('r'), help='File containing predicted classes, or - for stdin.')
    parser.add_argument('pred', type=argparse.FileType('r'), nargs='?', default=None, help='File containing true classes, or - for stdin; default None, exploring only predictions.')
    parser.add_argument('--pdf', type=str, default=None, help='Path to write PDF report to.')

    args = parser.parse_args()

    file_true = sys.stdin if args.true == '-' else args.true
    file_pred = sys.stdin if args.pred == '-' else args.pred

    y_true = [line.strip() for line in file_true]
    y_pred = [line.strip() for line in file_pred] if file_pred else y_true  # TODO: Rather set to None, and make evaluate() handle it...

    result = evaluate(y_pred, y_true, args.pdf)

    print(json.dumps(result))



def evaluate(y_pred, y_true, output_pdf=None) -> dict:

    labels = list(sorted(set(y_pred) & set(y_pred)))

    logger.info(classification_report(y_true, y_pred))

    conf_matrix = confusion_matrix(y_true, y_pred, labels=labels)
    logger.info('Confusion table:\n')
    conf_matrix_df = pd.DataFrame(conf_matrix, index=labels, columns=labels)
    conf_matrix_df.index.name = 'True'
    conf_matrix_df.columns.name = 'Predicted'
    logger.info('                Predicted:')
    logger.info(conf_matrix_df.to_markdown())

    if output_pdf:
        write_pdf_report(y_true, y_pred, conf_matrix, labels, output_pdf)

    return classification_report(y_true, y_pred, output_dict=True)


def write_pdf_report(y_true, y_pred, conf_matrix, labels, out_path) -> None:

    # TODO: Does creating a report have to be this ugly?

    def plot_to_image(plt):
        buf = BytesIO()
        plt.savefig(buf, format='png')
        buf.seek(0)
        return ImageReader(buf)

    pdf_filename = out_path
    c = canvas.Canvas(pdf_filename, pagesize=letter)
    width, height = letter

    c.setFont("Helvetica-Bold", 20)
    c.drawCentredString(width / 2.0, height - 40, "Report generated by ClEval")
    c.setFont("Helvetica", 12)

    text = c.beginText(50, height - 100)
    text.textLines(classification_report(y_true, y_pred, labels=labels))
    c.drawText(text)

    # Histogram
    combined_data = pd.DataFrame({
        'y_true': pd.Categorical(y_true, categories=labels, ordered=True),
        'y_pred': pd.Categorical(y_pred, categories=labels, ordered=True),
    })

    plt.figure(figsize=(13.5, 5))
    sns.histplot(data=combined_data.melt(), x='value', hue='variable', multiple='dodge', shrink=0.8)
    plt.legend(['Targets', 'Predictions'])
    plt.title('Histogram'); plt.xlabel('Class'); plt.ylabel('Frequency'); plt.xticks(labels)
    hist_image = plot_to_image(plt)
    c.drawImage(hist_image, 30, height - 460, width=540, height=200)
    plt.close()

    # Confusion Matrix
    plt.figure(figsize=(13.5, 5))
    sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=labels, yticklabels=labels)
    plt.title('Confusion Matrix'); plt.xlabel('Predicted'); plt.ylabel('True');
    conf_matrix_image = plot_to_image(plt)
    c.drawImage(conf_matrix_image, 30, height - 700, width=540, height=200)
    plt.close()

    c.showPage()
    c.save()
    logger.info(f"\nPDF report saved as {pdf_filename}")


def read_input(file):
    if file == '-':
        return [line.strip() for line in sys.stdin.readlines()]
    else:
        with open(file, 'r') as f:
            return [line.strip() for line in f.readlines()]



if __name__ == '__main__':
    main()
